server <- function(input,output,session){
observeEvent(input$done,{
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui,server)
}
multiplyNumbers(1:10,1:10)
server <- function(input,output,session){
output$plot <- renderPlot({
plot(trees$Girth,trees$Volume,main="Trees!",
xlab = "Girth",ylab = "Volume")
})
observeEvent(input$done,{
stopApp(brushedPoints(trees,input$brush,
xvar = "Girth",yvar = "Volume"))
})
}
pickTrees <- function(){
ui <- miniPage(
gadgetTitleBar("Select points by dragging your Mouse"),
miniContentPanel("plot",height="100%",brush="brush")
)
server <- function(input,output,session){
output$plot <- renderPlot({
plot(trees$Girth,trees$Volume,main="Trees!",
xlab = "Girth",ylab = "Volume")
})
observeEvent(input$done,{
stopApp(brushedPoints(trees,input$brush,
xvar = "Girth",yvar = "Volume"))
})
}
runGadget(ui,server)
}
pickTrees()
library(shiny)
library(miniUI)
pickTrees <- function(){
ui <- miniPage(
gadgetTitleBar("Select points by dragging your Mouse"),
miniContentPanel("plot",height="100%",brush="brush")
)
server <- function(input,output,session){
output$plot <- renderPlot({
plot(trees$Girth,trees$Volume,main="Trees!",
xlab = "Girth",ylab = "Volume")
})
observeEvent(input$done,{
stopApp(brushedPoints(trees,input$brush,
xvar = "Girth",yvar = "Volume"))
})
}
runGadget(ui,server)
}
pickTrees()
plot(trees$Girth,trees$Volume,main="Trees!",
xlab = "Girth",ylab = "Volume")
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
install.packages("googlevis")
install.packages("googleVis")
setwd("F:/Coursera/DataScienceSpecializationCoursera/9_ DevelopingDataProducts/Week1/Google Vis")
library(googleVis)
M <- gvisMotionChart(Fruits,"Fruit","Year",options = list())
print(M,"chart")
M
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit","year",
options= list(width=600,height=400))
M <- gvisMotionChart(Fruits,"Fruit","year",
options= list(width=600,height=400))
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit","Year",
options= list(width=600,height=400))
print(M,"chart")
print(M,"chart")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit","Year",
options= list(width=600,height=400))
print(M,file = "myfile.html")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit","Year",
options= list(width=600,height=400))
plot(M)
plot(M)
library(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
plot(M)
Fruits
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit","Year",
)
plot(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,"Fruit",timevar = "year")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,idVar="Fruit",timevar = "year")
?gvisLineChart
suppressPackageStartupMessages(library(googleVis))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line2 <- gvisLineChart(df,"Country",c("val1","val2"))
suppressPackageStartupMessages(library(googleVis))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line2 <- gvisLineChart(df, "country", c("val1","val2"),
options=list(
series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Line2)
suppressPackageStartupMessages(library(googleVis))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line2 <- gvisLineChart(df, "country", c("val1","val2")
)
plot(Line2)
suppressPackageStartupMessages(library(googleVis))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line2 <- gvisLineChart(df, "country", c("val1","val2"),
options=list(
series="[{targetAxisIndex: 0},
{targetAxisIndex:1}]",
vAxes="[{title:'val1'}, {title:'val2'}]"
))
plot(Line2)
suppressPackageStartupMessages(library(googleVis))
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Bar <- gvisBarChart(df)
plot(Bar)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits,idvar = "Fruit",timevar = "Year")
plot(M)
Motion=gvisMotionChart(Fruits,
idvar="Fruit",
timevar="Year")
plot(Motion)
data(Fruits)
Motion=gvisMotionChart(Fruits,
idvar="Fruit",
timevar="Year")
plot(Motion)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
plot(M)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
Intensity <- gvisIntensityMap(df)
plot(Intensity)
Org <- gvisOrgChart(Regions,
options=list(width=600, height=250,
size='large', allowCollapse=TRUE))
plot(Org)
library(googleVis)
op <- options(gvis.plot.tag='chart')
## Add the mean
CityPopularity$Mean=mean(CityPopularity$Popularity)
CC <- gvisComboChart(CityPopularity, xvar='City',
yvar=c('Mean', 'Popularity'),
options=list(seriesType='bars',
width=450, height=300,
title='City Popularity',
series='{0: {type:\"line\"}}'))
plot(CC)
Geo <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(height=300, width=350))
Tbl <- gvisTable(Exports, options=list(height=300, width=200))
plot(gvisMerge(Geo, Tbl, horizontal=TRUE))
M <- gvisMotionChart(Fruits, 'Fruit', 'Year',
options=list(width=400, height=350))
plot(M)
## Set options back to original options
options(op)
install.packages("plotly")
setwd("F:/Coursera/DataScienceSpecializationCoursera/9_ DevelopingDataProducts/Week1/Plotly")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
data("mtcars")
head(mtcars)
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
?plotly
?plot_ly
library(plotly)
plot_ly(mtcars, x=~wt, y=~mpg, mode="markers")
plot_ly(mtcats,x=~wt,y=~mpg,color = as.factor(cyl))
plot_ly(mtcars,x=~wt,y=~mpg,color = as.factor(cyl))
plot_ly(mtcars,x=~wt,y=~mpg,color = ~as.factor(cyl))
plot_ly(mtcars,x=~wt,y=~mpg,color = ~as.factor(cyl),size=~hp)
head(mtcars)
plot_ly(data=mtcars,x=~wt,t=~mpg,z=~hp,color = ~as.factor(cyl),
type = "scatter3d",mode="markers")
plot_ly(data=mtcars,x=~wt,t=~mpg,z=~hp,
type = "scatter3d",mode="markers")
plot_ly(data=mtcars,x=~wt,y=~mpg,z=~hp,color = ~as.factor(cyl),
type = "scatter3d",mode="markers")
airmiles
plot_ly(x=time(airmiles),y=airmiles)
?plot_ly
plot_ly(x=time(airmiles),y=airmiles,mode="lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
head(EuStockMarkets)
gather(EuStockMarkets,index,price)
gather(as.data.frame(EuStockMarkets),index,price)
time=rep(time(EuStockMarkets),4)
time
time(EuStockMarkets)
EuStockMarkets
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
plot_ly(stocks,x=~time,y=~price,~colour=index,mode="lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
plot_ly(stocks,x=~time,y=~price,colour=~index,mode="lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
plot_ly(stocks,x=time,y=price,colour=index,mode="lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
plot_ly(stocks,x=~time,y=~price,colour=~index,mode="lines")
str(stocks)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4)) %>%
mutate(index=as.factor(index))
plot_ly(stocks,x=~time,y=~price,colour=~index,mode="lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4)) %>%
mutate(index=as.factor(index))
plot_ly(stocks,x=~time,y=~price,color=~index,mode="lines")
head(state_op)
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
state_pop
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
borders <- list(color=toRGB("red"))
map_options <- list(
scope="usa",
projection = list(type="alber usa"),
showlakes = TRUE,
lakecolor = toRGB("white")
)
plot_ly(state_pop,z=Pop,text=hover,locations=State,
type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
borders <- list(color=toRGB("red"))
map_options <- list(
scope="usa",
projection = list(type="alber usa"),
showlakes = TRUE,
lakecolor = toRGB("white")
)
plot_ly(state_pop,z=~Pop,text=hover,locations=State,
type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
borders <- list(color=toRGB("red"))
map_options <- list(
scope="usa",
projection = list(type="alber usa"),
showlakes = TRUE,
lakecolor = toRGB("white")
)
plot_ly(state_pop,z=~Pop,text=~hover,locations=State,
type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
borders <- list(color=toRGB("red"))
map_options <- list(
scope="usa",
projection = list(type="alber usa"),
showlakes = TRUE,
lakecolor = toRGB("white")
)
plot_ly(state_pop,z=~Pop,text=~hover,locations=~State,
type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
state_pop$Pop
state_pop <- data.frame(State=state.abb,Pop=as.vector(
state.x77[,1]))
state_pop$hover <- with(state_pop,paste(State, '<br',"Population:",Pop))
borders <- list(color=toRGB("red"))
map_options <- list(
scope="usa",
projection = list(type="alber usa"),
showlakes = TRUE,
lakecolor = toRGB("white")
)
plot_ly(z=~state_pop$Pop,text=~state_pop$hover,locations=~state_pop$State,type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
plot_ly(z=~state_pop$Pop,text=~state_pop$hover,locations=~state_pop$State,type="choropleth",locationmode="USA-states",
color=Pop,colors = "Blues",marker=list(line=borders)) %>%
layout(title="US Population in 1975",geo=map_options)
state_pop$Pop
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="choropleth/ag")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="choropleth/ag")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="choropleth/ag")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
p
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
