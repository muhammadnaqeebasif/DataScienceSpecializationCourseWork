a <- available.packages()
head(rownames(a),3)
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
library("ggplot2", lib.loc="~/R/win-library/3.4")
search()
detach("package:BiocInstaller", unload=TRUE)
search()
installed.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
print("Hello World")
install.packages("swirl")
lapply
x <-list(a=1:5,b=rnorm(10))
x
lapply(x, mean)
x <- 1:4
lapply(x, runif,min=0,max=10)
x <- matrix(rnorm(200),20,10)
apply(x, 2, mean)
apply(x, 1, sum)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4,4:1)
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
print("helo")
a <- available.packages()
library(KernSmooth)
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
installed.packages("KernSmooth")
install.packages("swirl")
biocLite("rhdf5")
library(rhdf5)
UcscDv <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(UcscDv,"SHOW DATABASES;")
dbDisconnect(UcscDv)
hg19 <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu",
db="hg19")
allTables <-dbListTables(hg19)
length(allTables)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"SELECT COUNT(*) FROM affyU133Plus2;")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19,"SELECT * FROM affyU133Plus2 WHERE
misMatches BETWEEN 1 AND 3")
affyMist <-fetch(query)
quantile(affyMist$misMatches)
dbClearResult(query)
library(RMySQL)
UcscDv <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(UcscDv,"SHOW DATABASES;")
dbDisconnect(UcscDv)
hg19 <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu",
db="hg19")
allTables <-dbListTables(hg19)
length(allTables)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"SELECT COUNT(*) FROM affyU133Plus2;")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19,"SELECT * FROM affyU133Plus2 WHERE
misMatches BETWEEN 1 AND 3")
affyMist <-fetch(query)
quantile(affyMist$misMatches)
dbClearResult(query)
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
View(students)
View(students)
students2
?gather
gather(students2,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(data = res,col=sex_class,into=c("sex","class"))
submit()
students
students3
students3 %>% separate(col=test,into=c("midterm","final"))
students3 %>% gather(class_grade,-test,-name)
students3 %>% gather(class_grade,value,-test,-name)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,value,-test,-name) %>%separate(test)
students3 %>% gather(class,value,-test,-name) %>%separate(test,into = c("midterm","final"))
submit()
students3 %>% spread(test)
students3 %>% spread(test,name)
students3 %>% spread(test)
students3 %>% spread(test,-name:)
students3 %>% spread(test,-name)
View(students3)
View(students3)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,grade,-test,-name)
students3 %>% gather(class,grade,-test,-name) %>%spread(test,grade)
submit()
students3 %>% gather(class,grade,-test,-name)
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE)
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE) %>% spread(test,grade)
submit()
reset()
swirl()
View(students2)
View(students2)
students2 %>% gather(sex_count,count,-grade)
students2 %>% gather(sex_count,count,-grade) %>% separate(sex_count,into(c("sex","class")))
students2 %>% gather(sex_count,count,-grade) %>% separate(sex_count,into=c("sex","class"))
View(students3)
View(students3)
students3 %>% gather(key)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,value,-test,-name,factor_key = TRUE)
students3 %>% gather(key=class,value,-test,-name,factor_key = TRUE)
reset()
swirl()
students3 %>% gather(class,grade,-test,-name,factor_key = TRUE)
submit()
?spread()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE) %>% spread(test,grade) %>%mutate(class=parse_number(class))
submit()
students4
submit()
submit()
submit()
passed
failed
passed <-passed %>% mutate(status="passed")
failed <-failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
sat %>%gather(test_sex,count)
sat %>%gather(test_sex,count,-score_range)
sat %>%gather(test_sex,count,-score_range) %>% separate(test_sex,into = c("test","sex"))
submit
submit()
submit()
submit()
submit()
sat %>%select(-contains("total"))%>%
xzx
sat %>%select(-contains("total"))
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range)
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
%>% print
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
test <-sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
View(test)
test %>% mutate(sex=ifelse(sex=='fem','female','male'))
submit()
reset()
swirl()
submit()
remove.packages(swirl
)
remove.packages('swirl')
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(student2,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into=c("sex","class"))
setwd("F:/Coursera/Data Science Specialization/GettingAndCleaningData/Project")
# 1. Reading the training files
train_activity <- read.table("./UCI HAR Dataset/train/y_train.txt")
train_features <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_subject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
print(dim(train_activity))
print(dim(train_features))
print(dim(train_subject))
test_activity <- read.table("./UCI HAR Dataset/test/y_test.txt")
test_features <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_subject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
print(dim(test_activity))
print(dim(test_features))
print(dim(test_subject))
# merge the train and test data sets.
features_data <- rbind(train_features,test_features)
activity_data <- rbind(train_activity,test_activity)
subject_data <- rbind(train_subject,test_subject)
colnames(activity_data) <- c('Activity')
colnames(subject_data) <- c('Subject')
# Checking the overall dimension of the merged data
cat("Is the dimension of merged features data is equal to the sum of individual data?",
(dim(features_data)[1]==dim(train_features)[1] + dim(test_features)[1]) &&
dim(features_data)[2]==dim(train_features)[2] , "\n")
cat("Is the dimension of merged activity data is equal to the sum of individual data?",
(dim(activity_data)[1]==dim(train_activity)[1] + dim(test_activity)[1]) &&
dim(activity_data)[2]==dim(train_activity)[2], "\n")
cat("Is the dimension of merged subject data is equal tto the sum of individual data?",
(dim(subject_data)[1]==dim(train_subject)[1] + dim(test_subject)[1]) &&
dim(subject_data)[2]==dim(train_subject)[2], "\n")
head(features_data)
head(activity_data)
head(subject_data)
# Reading the feature description file
features_names <- read.table('./UCI HAR Dataset/features.txt')
head(features_names,n=10)
# Extracting the features from the feature names which contain 'mean' or 'std' in the name
extract_feat_names <- subset(features_names,grepl("mean|std",features_names[,2]))
dim(extract_feat_names)
# using the features extracted previously subsets the feature data so that it contains the
# features which only contain 'std' or mean in the name
extract_features_data <- features_data[,extract_feat_names[,1]]
# checking the dimension of the extracted data
dim(extract_features_data)
#renaming the column names
colnames(extract_features_data) <- extract_feat_names[,2]
head(extract_features_data)
# Reading the activity description file
activity_names <- read.table("./UCI HAR Dataset/activity_labels.txt")
# naming the activities in activity_data using factor function
activity_data$Activity<-factor(activity_data$Activity,levels = 1:6 ,
labels = activity_names[,2])
head(activity_data)
# extract column names
col_names <- colnames(extract_features_data)
# removing '()' from the col_names
col_names<- gsub('\\()',"",col_names)
#replaing mean with Mean
col_names<- gsub('-mean',"Mean",col_names)
#replacing std with StandardDeviation
col_names<- gsub('-std',"StandardDeviation",col_names)
#capitalizing x,y,z,axis
col_names<- gsub('[Bb]ody[Bb]ody',"Body",col_names)
#replacing Acc with Acceleration
col_names <- gsub('[Aa]cc','Acceleration',col_names)
#replacing Mag with magnitude
col_names <- gsub('[Mm]ag','Magnitude',col_names)
# replacing prefix t and f with TimeDomain and FrequencyDomain respectively
col_names <- gsub('^t','TimeDomain',col_names)
col_names <- gsub('^f','FrequencyDomain',col_names)
#replacing Gyro with Gyroscope
col_names <- gsub('[Gg]yro','Gyroscope',col_names)
# setting the colunmn names of the featured data to the modified names
colnames(extract_features_data) <- col_names
head(extract_features_data)
library(data.table)
#merging all the data into a single data frame
overall_data <- cbind(subject_data,activity_data,extract_features_data)
#creating the data table from dataframe
overall_data <- data.table(overall_data)
head(overall_data)
# Average of each variable group by activity and subject
library(dplyr)
tidy_data <- overall_data %>% group_by(Subject,Activity) %>%
summarise_all(funs(mean))
head(tidy_data,n=10)
#writing tidy_dat to the tidy_data.csv
head(tidy_data,n=10)
dim(tidy_data)
activity_names
activity_names[,2]
names(extract_feat_names)
extract_feat_names[,2]
col_names
