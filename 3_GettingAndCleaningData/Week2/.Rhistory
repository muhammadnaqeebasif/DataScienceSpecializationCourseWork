a <- available.packages()
head(rownames(a),3)
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
library("ggplot2", lib.loc="~/R/win-library/3.4")
search()
detach("package:BiocInstaller", unload=TRUE)
search()
installed.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
print("Hello World")
install.packages("swirl")
lapply
x <-list(a=1:5,b=rnorm(10))
x
lapply(x, mean)
x <- 1:4
lapply(x, runif,min=0,max=10)
x <- matrix(rnorm(200),20,10)
apply(x, 2, mean)
apply(x, 1, sum)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4,4:1)
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(data.table)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
tables()
DT[2,]
DT[DT$y=='a']
DT[c(2,3)]
DT[DT$y=='a']
DT[,c(2,3)]
DT[,c(2,3)]
DT[c(2,3)]
library(data.table)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
tables()
DT[2,]
DT[DT$y=='a']
DT[c(2,3)]
DT[DT$y=='a']
DT[,c(2,3)]
DT
DT[,list(mean(x),sum(z))]
DT[,c(2,3)]
DT[,w:=z^2]
DT
setwd("F:/Coursera/Data Science Specialization/GettingAndCleaningData/Quiz1")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "q1.csv")
list.files(".")
###############################################################################
Question1
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "q1.csv")
list.files(".")
pdfFile <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(pdfFile,destfile = "q1.pdf")
list.files(".")
###############################################################################
Question1
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "q1.csv")
list.files(".")
pdfFile <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(pdfFile)
list.files(".")
data_q1 <-read.csv("q1.csv")
names(data_q1)
data_q1$VAL
SUM(data_q1==24)
sum(data_q1==24)
sum(data_q1==24,na.rm = TRUE)
data_q1$VAL==1
data_q1$VAL==01
data_q1$VAL[1]
typeof(data_q1$VAL[1])
data_q1$VAL[1] == 17
sum(c(TRUE,FALSE))
sum(c(TRUE,FALSE,NA),na.rm = TRUE)
sum(data_q1$VAL==24,na.rm = TRUE)
data_q1$FES
typeof(data_q1$FES)
fileUrl <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl,destfile = "q3.xlsx")
fileUrl <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl,destfile = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
library(xlsx)
?read.xlsx
c(18:23)
18:23
data_q3 <- read.xlsx("q3.xlsx",1,rowIndex = 18:23,colIndex = 7:15)
data_q3
dat <- read.xlsx("q3.xlsx",1,rowIndex = 18:23,colIndex = 7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
data_q4 <- xmlTreeParse("Q4.xml",useInternalNodes = TRUE)
rootNode <- xmlTreeParse("Q4.xml",useInternalNodes = TRUE)
xpathSApply(rootNode,"//name",xmlValue)
zipcode <- xpathSApply(rootNode, "//zipcode", xmlValue)
length(zipcode[zipcode==21231])
###Q5#################################################
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl,destfile = "Q5.csv")
DT <- fread("Q5.csv",sep = ",")
DT
library(data.table)
DT <- fread("Q5.csv",sep = ",")
DT
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
?system.time
system.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "pass", dbname="test")
con
View(con)
View(con)
UcscDB <- dbConnect(MySQL(),host="genome-mysql.cse.ucsc.edu",)
UcscDB <- dbConnect(MySQL(),host="genome-mysql.cse.ucsc.edu",user = "genome")
result <- dbGetQuery(UcscDB,"SHOW DATABASES";)
result <- dbGetQuery(UcscDB,"SHOW DATABASES;")
result
setwd("F:/Coursera/Data Science Specialization/GettingAndCleaningData/Week2")
UcscDv <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(UcscDv,"SHOW DATABASES;")
dbDisconnect(UcscDv)
result
hg19 <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu",
db="hg19")
allTables <-dbListTables(hg19)
length(allTables)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"SELECT COUNT(*) FROM affyU133Plus2;")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19,"SELECT * FROM affyU133Plus2 WHERE
misMatchs BETWEEN 1 AND 3")
affyMist <-fetch(query)
query <- dbSendQuery(hg19,"SELECT * FROM affyU133Plus2 WHERE
misMatches BETWEEN 1 AND 3")
affyMist <-fetch(query)
quantile(affyMist)
affyMist
quantile(affyMist$misMatches)
dbClearResult(query)
