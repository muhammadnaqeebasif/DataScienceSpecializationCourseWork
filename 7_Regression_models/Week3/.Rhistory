mua <- seq(30,35,0.5)
mu0 <- 30
n <- c(8,16,32,64,128)
sigma <- 4
z <- qnorm(1-alpha)
for(i in n){
power_values <- c(power_values,pnorm(mu0+ z*sigma/sqrt(i),mean=mua,
sd=sigma/sqrt(i),lower.tail = FALSE)
)
}
power_df <- data.frame(power=power_values,mua=rep(mua,5),n=factor(rep(n,each=length(mua))))
g <- ggplot(data <- power_df,aes(x=mua,y=power,colour=factor(n)))
g + geom_line(size=1.5)
library(ggplot2)
alpha <- 0.05
power_values <- as.numeric()
mua <- seq(30,35,0.1)
mu0 <- 30
n <- c(8,16,32,64,128)
sigma <- 4
z <- qnorm(1-alpha)
for(i in n){
power_values <- c(power_values,pnorm(mu0+ z*sigma/sqrt(i),mean=mua,
sd=sigma/sqrt(i),lower.tail = FALSE)
)
}
power_df <- data.frame(power=power_values,mua=rep(mua,5),n=factor(rep(n,each=length(mua))))
g <- ggplot(data <- power_df,aes(x=mua,y=power,colour=factor(n)))
g + geom_line(size=1.5)
library(ggplot2)
alpha <- 0.05
power_values <- as.numeric()
mua <- seq(30,35,0.1)
mu0 <- 30
n <- c(8,16,32,64,128)
sigma <- 4
z <- qnorm(1-alpha)
for(i in n){
power_values <- c(power_values,pnorm(mu0+ z*sigma/sqrt(i),mean=mua,
sd=sigma/sqrt(i),lower.tail = FALSE)
)
}
power_df <- data.frame(power=power_values,mua=rep(mua,5),n=factor(rep(n,each=length(mua))))
g <- ggplot(data <- power_df,aes(x=mua,y=power,colour=n))
g + geom_line(size=1.5)
library(ggplot2)
alpha <- 0.05
power_values <- as.numeric()
mua <- seq(30,35,0.1)
mu0 <- 30
n <- c(8,16,32,64,128)
sigma <- 4
z <- qnorm(1-alpha)
for(i in n){
power_values <- c(power_values,pnorm(mu0+ z*sigma/sqrt(i),mean=mua,
sd=sigma/sqrt(i),lower.tail = FALSE)
)
}
power_df <- data.frame(power=power_values,mua=rep(mua,5),n=factor(rep(n,each=length(mua))))
g <- ggplot(data <- power_df,aes(x=mua,y=power,colour=n))
g + geom_line(size=1.5)
g + geom_line(size=1.5)
power.t.test(n=16,delta = 2/4,type = "one.sample",sd=1,alternative = "one.sided")$power
power.t.test(n=16,delta = 2,type = "one.sample",sd=4,alternative = "one.sided")$power
power.t.test(n=16,delta = 100,type = "one.sample",sd=200,alternative = "one.sided")$power
power.t.test(power=0.8,delta = 100,type = "one.sample",sd=200,alternative = "one.sided")$power
power.t.test(power=0.8,delta = 100,type = "one.sample",sd=200,alternative = "one.sided")$n
dat <- data.frame(Subject=1:5,BaseLine = c(140,138,150,148,135),
Week2 = c(132,135,151,146,130))
data
dat <- data.frame(Subject=1:5,BaseLine = c(140,138,150,148,135),
Week2 = c(132,135,151,146,130))
dat
dat <- data.frame(Subject=1:5,BaseLine = c(140,138,150,148,135),
Week2 = c(132,135,151,146,130))
t.test(dat$BaseLine,dat$Week2,paired = TRUE)
power.t.test(n=9,sd=30,power=0.05,type = "one.sample",alternative =
"one.sided")
power.t.test(n=9,sd=30,power=0.05,type = "one.sample",alternative =
"two.sided")
power.t.test(n=9,sd=30,power=0.95,type = "one.sample",alternative =
"two.sided")
1100 -41
data(sleep)
head(sleep)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
## Calculating directly
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
## using R's built in function
t.test(difference)
## using R's built in function, another format
t.test(g2, g1, paired = TRUE)
## using R's built in function, another format
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
(1100+c(-1,1)*qt(0.975)*30/sqrt(9))
(1100+c(-1,1)*qt(0.975,8)*30/sqrt(9))
data <- data.frame(person=1:4,pepsi=c(0,0,0,1),coke=(1,1,1,0))
data <- data.frame(person=1:4,pepsi=c(0,0,0,1),coke=c(1,1,1,0))
data
data <- data.frame(person=1:4,pepsi=c(0,0,0,1),coke=c(1,1,1,0))
t.test(data$pepsi,data$coke,paired = TRUE)
data <- data.frame(person=1:4,pepsi=c(0,0,0,1),coke=c(1,1,1,0))
t.test(data$pepsi,data$coke)
dat <- data.frame(Subject=1:5,BaseLine = c(140,138,150,148,135),
Week2 = c(132,135,151,146,130))
t.test(dat$BaseLine,dat$Week2,paired = TRUE)
n <- 4
x <-3
test <- binom.test(x=x,n=n,alternative = "greater")
n <- 4
x <-3
test <- binom.test(x=x,n=n,alternative = "greater")
test
rate <- 1/100
e <- 10
days <- 1787
poisson.test(errors,T=days,r=rate,alt="less")
rate <- 1/100
e <- 10
days <- 1787
poisson.test(e,T=days,r=rate,alt="less")
alpha <- 0.05
mua <- 32
mu0 <- 30
n <- 16
sigma <- 4
z <- qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n),mean=mu0,sd=sigma/sqrt(n),lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n),mean=mua,sd=sigma/sqrt(n),lower.tail = FALSE)
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "two.sided")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "two.sided",sig.level = 0.10)
power.t.test(n=100,sd=0.04,delta = -0.01,alternative = "two.sided",sig.level = 0.05)
power.t.test(n=100,sd=0.04,delta = -0.01,alternative = "two.sided",sig.level = 0.05,type = "one.sample")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "two.sided",sig.level = 0.05,type = "one.sample")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "two.sided",sig.level = 0.05,type = "one.sided")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "one.sided",sig.level = 0.05,type = "one.sample")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "two.sided",sig.level = 0.10,type = "one.sample")
power.t.test(n=100,sd=0.04,delta = 0.01,alternative = "one.sided",sig.level = 0.05,type = "one.sample")
power.t.test(power = 0.90,sd=0.04,delta = 0.01,alternative = "one.sided",sig.level = 0.05,type = "one.sample")
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- 0.9 #power
n <- power.t.test(power=pow, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
n
mux <- -3
n <- 9
sdx <- 1.5
muy <- 1
sdy <- 1.8
sdxy <- sqrt(((n-1)*sdx^2 +(n-1)*sdy^2)/(n+n-2))
q <- (mux -muy-0)/(sdxy * sqrt(1/n +1/n))
pt(q,df = n-1)
mux <- -3
n <- 9
sdx <- 1.5
muy <- 1
sdy <- 1.8
sdxy <- sqrt(((n-1)*sdx^2 +(n-1)*sdy^2)/(n+n-2))
q <- (mux -muy-0)/(sdxy * sqrt(1/n +1/n))
pt(q,df = 2*n-1)
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
σ_p
sdxy
sdxy^2
(μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5
)
q
muy
mux <- -3
n <- 9
sdx <- 1.5
muy <- 1
sdy <- 1.8
sdxy <- sqrt(((n-1)*sdx^2 +(n-1)*sdy^2)/(n+n-2))
q <- (mux -muy-0)/(sdxy * sqrt(2/n ))
pt(q,df = 2*n-1)
q
muy - mux
μ_y - μ_x
mux - muy
(sdxy * sqrt(2/n )
)
(σ_p * (1 / n_x + 1 / n_y)^.5)
n_x
n_y
library(UsingR)
data(diamond)
library(ggplot2)
g <- ggplot(diamond,aes(x=carat,y=price))
g <- g +xlab("Mass (carats)")
g <- g + ylab("Price (SIN $)")
g <- g + geom_point(size=6,colour="black",alpha=0.2)
g <- g + geom_point(size=5,colour="blue",alpha=0.2)
g <- g + geom_smooth(method="lm",colour="black")
g
fit <- lm(price~carat,data = diamond)
coef(fit)
fit2 <- lm(price~I(carat-mean(carat)),data=diamond)
coef(fit2)
newx <- c(0.16,0.27,0.34)
coef(fit)[1] + coef(fit)[2]*newx
predict(fit,newdata=data.frame(carat=newx))
data(diamond)
fit <- lm(price~carat,data=diamond)
e <- resid(fit)
data(diamond)
fit <- lm(price~carat,data=diamond)
e <- resid(fit)
sum(e)
data(diamond)
fit <- lm(price~carat,data=diamond)
e <- resid(fit)
sum(e*diamond$carat)
data(diamond)
fit <- lm(price~carat,data=diamond)
e <- resid(fit)
diamond$residuals <- e
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(fill="grey")+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(aes(fill="grey"))+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="blue")+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="grey")+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black")+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=1)+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2)+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2,alpha=0.4)+geom_hline(yintercept = 0)
g
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2,alpha=0.5)+geom_hline(yintercept = 0)
g
y_pred <- predict(fit,diamond$carat)
y_pred <- predict(fit,data.frame(carat=diamond$carat))
y_pred
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2,alpha=0.5)+geom_hline(yintercept = 0)
g +geom_segment(aes(xend=carat, yend=0), color="blue")
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2,alpha=0.5)+geom_hline(yintercept = 0)
g +geom_segment(aes(xend=carat, yend=0), color="red")
library(ggplot2)
g <- ggplot(data=diamond,aes(y = residuals,x = carat))
g <- g + xlab("Mass (carats)") + ylab("Residuals (SIN$)")
g <- g + geom_point(color="black",size=2,alpha=0.5)+geom_hline(yintercept = 0)
g +geom_segment(aes(xend=carat, yend=0), color="red")
x <- runif(100,-3,3)
y <- y +sin(x) + rnorm(100,sd=.2)
x <- runif(100,-3,3)
y <- x +sin(x) + rnorm(100,sd=.2)
library(ggplot2)
g <- ggplot(data.frame(x =x,y=y),aes(x=x,y=y))
g <- g + geom_smooth(method = "lm",color="black")
g <- g + geom_point(size=7,color="black",alpha=0.5)
g <- g + geom_point(size=5,color="red",alpha=0.4)
g
x <- runif(100,-3,3)
y <- x +sin(x) + rnorm(100,sd=.2)
library(ggplot2)
g <- ggplot(data.frame(x =x,y=y),aes(x=x,y=y))
g <- g + geom_smooth(method = "lm",color="black")
g <- g + geom_point(size=7,color="black",alpha=0.5)
g <- g + geom_point(size=5,color="red",alpha=0.4)
g
x <- runif(100,-3,3)
y <- x +sin(x) + rnorm(100,sd=.2)
library(ggplot2)
g <- ggplot(data.frame(x =x,y=y),aes(x=x,y=y))
g <- g + geom_smooth(method = "lm",color="black")
g <- g + geom_point(size=7,color="black",alpha=0.5)
g <- g + geom_point(size=5,color="red",alpha=0.4)
g
x <- runif(100,-3,3)
y <- x +sin(x) + rnorm(100,sd=.2)
library(ggplot2)
g <- ggplot(data.frame(x =x,y=y),aes(x=x,y=y))
g <- g + geom_smooth(method = "lm",color="black")
g <- g + geom_point(size=7,color="black",alpha=0.5)
g <- g + geom_point(size=5,color="red",alpha=0.4)
g
library(ggplot2)
g <- ggplot(data.frame(x =x,y=resid(lm(y~x))),aes(x=x,y=y))
g <- g + geom_smooth(method = "lm",color="black")
g <- g + geom_point(size=7,color="black",alpha=0.5)
g <- g + geom_point(size=5,color="red",alpha=0.4)
g
data(diamond)
e <- c(resid(lm(price~1,data=diamond)),
resid(lm(price~carat,data=diamond)))
e
lm(price~1,data=diamond)
mean(diamond$price)
data(diamond)
e <- c(resid(lm(price~1,data=diamond)),
resid(lm(price~carat,data=diamond)))
fit <- factor(c(rep("Itc",nrow(diamond)),
rep("Itc,slope",nrow(diamond))))
g <- ggplot(data.frame(e=e,fit=fit),aes(y=e,x=fit,fill=fit))
g <- g + geom_dotplot(binaxis = "y",size=2,stackdir = "center")
g <- g +xlab("Fitting Approach") + ylab("Residual price")
g
fit <- lm(price~carrat,data=diamond)
fit <- lm(price~carat,data=diamond)
summary(fit)$sigma
sqrt(sum(resid(fit)^2)/(n-2))
n <- nrow(diamond)
sqrt(sum(resid(fit)^2)/(n-2))
library(UsingR)
data("diamond")
y <- diamond$price
x <- diamond$carat
n <- length(y)
beta1 <- cor(x,y) * sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1*x
sigma <- sqrt(e^2)/n-2
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2/ssx) ^ 0.5 * sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0/seBeta0; tBeta1 <- beta1/seBeta1
pBeta0 <- 2 *pt(abs(tBeta0),df=n-2,lower.tail = FALSE)
pBeta1 <- 2 *pt(abs(tBeta1),df=n-2,lower.tail = FALSE)
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),
c(beta1,seBeta1,tBeta1,pBeta1))
library(UsingR)
data("diamond")
y <- diamond$price
x <- diamond$carat
n <- length(y)
beta1 <- cor(x,y) * sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1*x
sigma <- sqrt(e^2)/n-2
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2/ssx) ^ 0.5 * sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0/seBeta0; tBeta1 <- beta1/seBeta1
pBeta0 <- 2 *pt(abs(tBeta0),df=n-2,lower.tail = FALSE)
pBeta1 <- 2 *pt(abs(tBeta1),df=n-2,lower.tail = FALSE)
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),
c(beta1,seBeta1,tBeta1,pBeta1))
colnames(coefTable) <- c("Estimate","Std.Error","t value","P(>|t|")
coefTable
beta1 <- cor(x,y) * sd(y)/sd(x)
beta1
library(UsingR)
data("diamond")
y <- diamond$price
x <- diamond$carat
n <- length(y)
beta1 <- cor(x,y) * sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1*x
sigma <- sqrt(sum(e^2))/n-2
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2/ssx) ^ 0.5 * sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0/seBeta0; tBeta1 <- beta1/seBeta1
pBeta0 <- 2 *pt(abs(tBeta0),df=n-2,lower.tail = FALSE)
pBeta1 <- 2 *pt(abs(tBeta1),df=n-2,lower.tail = FALSE)
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),
c(beta1,seBeta1,tBeta1,pBeta1))
coefTable
colnames(coefTable) <- c("Estimate","Std.Error","t value","P(>|t|")
rownames(coefTable) <- c("(Intercept)","x")
coefTable
fit <-lm(y~x)
summary(fit)$coefficients
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p1
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p2
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g
g = g + geom_line()
g
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~1))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
coef(lm(y~x))
summary(lm(y~x))$sig
data("mtcars")
fit <- lm(mpg~weight,data=mtcars)
View(mtcars)
View(mtcars)
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=mean(mtcars$wt)),interval = ("confidence"))
help(mtcars)
View(mtcars)
View(mtcars)
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=3),interval = ("prediction"))
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=mean(mtcars$wt)),interval = ("confidence"))
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=3),interval = ("prediction"))
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=2),interval = ("confidence"))
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=2),interval = ("confidence"))-
predict(fit,newdata = data.frame(wt=0),interval = ("confidence"))
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
fit
summary(fit)
data("mtcars")
fit <- lm(mpg~wt,data=mtcars)
predict(fit,newdata = data.frame(wt=2),interval = ("confidence"))-
predict(fit,newdata = data.frame(wt=0),interval = ("confidence"))
data("mtcars")
fit1 <- lm(mpg~wt,data=mtcars)
fit2(lm(mpg~1,data=mtcars))
data("mtcars")
fit1 <- lm(mpg~wt,data=mtcars)
fit2 <-lm(mpg~1,data=mtcars)
sum(summary(fit1)$sigma ^ 2)/sum(summary(fit2)$sigma ^ 2)
setwd("F:/Coursera/DataScienceSpecializationCoursera/7_Regression_models/Week3")
n<-100
x <- rnorm(100)
x2 <- rnorm(100)
x3 <- rnorm(100)
y <- 1 + x +x2 +x3 + rnorm(n,sd=0.1)
ey <- resid(lm(y~x2+x3))
ex <- resid(lm(x~x2+x3))
sum(ey*ex)/sum(ex^2)
coef(lm(y~x+x2+x3))
