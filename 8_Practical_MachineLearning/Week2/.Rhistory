j <- j +1
}
myformulae <- c(myformulae,as.formula(myformula))
}
myformulae
}
myformulae <- listOfFormulae(colnames(mtcars))
other_models <- list()
for(i in 1:length(myformulae)){
if(i==1){
other_models<-list.append(other_models,lm(myformulae[[i]],data=mtcars))
}
other_models<-list.append(other_models,update(other_models[[1]],myformulae[[i]]))
}
anova_func <-  "anova("
for(i in 1:length(other_models)){
anova_func <- c(anova_func,"other_models[[",i,"]]",",")
anova_func <- paste(anova_func,collapse = "")
}
anova_func <- paste(substr(anova_func,1,nchar(anova_func)-1),")",sep = "")
eval(parse(text=anova_func))
library(rlist)
listOfFormulae<- function(col){
myformulae <- as.character()
for(i in 2:ncol(mtcars)){
myformula <- paste(paste(col[1],"~"),col[2])
j=3
while(j<=i){
myformula <- paste(paste(myformula,"+"),col[j])
j <- j +1
}
myformulae <- c(myformulae,as.formula(myformula))
}
myformulae
}
myformulae <- listOfFormulae(colnames(mtcars))
other_models <- list()
for(i in 1:length(myformulae)){
if(i==1){
other_models<-list.append(other_models,lm(myformulae[[i]],data=mtcars))
}
else{
other_models<-list.append(other_models,update(other_models[[1]],myformulae[[i]]))
}
}
anova_func <-  "anova("
for(i in 1:length(other_models)){
anova_func <- c(anova_func,"other_models[[",i,"]]",",")
anova_func <- paste(anova_func,collapse = "")
}
anova_func <- paste(substr(anova_func,1,nchar(anova_func)-1),")",sep = "")
eval(parse(text=anova_func))
best_model <- other_models[[6]]
summary(best_model)
summary(mpg~.,data=mtcars)
summary(lm(mpg~.,data=mtcars))
summary(lm(mpg~.-cyl,data=mtcars))
summary(lm(mpg~.-cyl-vs,data=mtcars))
summary(lm(mpg~.-cyl-vs-carb,data=mtcars))
summary(lm(mpg~.-cyl-vs-carb-gear,data=mtcars))
summary(lm(mpg~.-cyl-vs-carb-gear-drat,data=mtcars))
summary(lm(mpg~.-cyl-vs-carb-gear-drat-disp,data=mtcars))
summary(lm(mpg~.-cyl-vs-carb-gear-drat,data=mtcars))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"),levels = c(0,1))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
library(rlist)
listOfFormulae<- function(col){
myformulae <- as.character()
for(i in 2:ncol(mtcars)){
myformula <- paste(paste(col[1],"~"),col[2])
j=3
while(j<=i){
myformula <- paste(paste(myformula,"+"),col[j])
j <- j +1
}
myformulae <- c(myformulae,as.formula(myformula))
}
myformulae
}
myformulae <- listOfFormulae(colnames(mtcars))
other_models <- list()
for(i in 1:length(myformulae)){
if(i==1){
other_models<-list.append(other_models,lm(myformulae[[i]],data=mtcars))
}
else{
other_models<-list.append(other_models,update(other_models[[1]],myformulae[[i]]))
}
}
anova_func <-  "anova("
for(i in 1:length(other_models)){
anova_func <- c(anova_func,"other_models[[",i,"]]",",")
anova_func <- paste(anova_func,collapse = "")
}
anova_func <- paste(substr(anova_func,1,nchar(anova_func)-1),")",sep = "")
eval(parse(text=anova_func))
best_model <- other_models[[4]]
summary(best_model)
best_model <- other_models[[6]]
summary(best_model)
other_models[[6]]$terms
other_models[[6]]$fitted.values
other_models[[6]]$assign
other_models[[6]]$qr
summary(best_model)
coef(summary(best_model))
summary(best_model)
betterfit <- update(other_models[[6]],-drat)
better_fit <- update(other_models[[6]],mpg~.-drat)
summary(better_fit)
better_fit <- update(other_models[[6]],mpg~.-drat-disp)
summary(better_fit)
better_fit <- update(other_models[[6]],mpg~.-drat-disp-cyl8)
summary(better_fit)
better_fit <- update(other_models[[6]],mpg~.-drat-disp-cyl8)
summary(better_fit)
better_fit <- update(other_models[[6]],mpg~.-drat-disp)
summary(better_fit)
better_fit <- update(other_models[[6]],mpg~.-drat-disp-amManual)
summary(better_fit)
summary(lm(mpg~wt+hp+am+cyl,data=mtcars))
summary(lm(mpg~wt+hp+am+cyl-cyl8,data=mtcars))
summary(lm(mpg~wt+hp+am+cyl6,data=mtcars))
summary(lm(mpg~wt+hp+am+factor(cyl,exclude = c('8')),data=mtcars))
library(GGally)
library(GGally)
ggpairs(data = mtcars)
install.packages(corplot)
install.packages('corplot')
install.packages('corrplot')
library(corrplot)
corrplot(cor(mtcars))
cor(mtcars)
install.packages("lsr")
library(lsr)
correlate(mtcars)
library(corrplot)
data("mtcars")
corrplot(cor(mtcars))
library(corrplot)
data("mtcars")
cor(mtcars)
cor(mtcars)
library(GGally)
am_colNum <- grep("am",colnames(mtcars))
reordered_cols <- c(1,am_colNum)
for(i in 2:ncol(mtcars)){
if(i!=am_colNum){
reordered_cols <- c(reordered_cols,i)
}
}
mtcars <- mtcars[,reordered_cols]
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"),levels = c(0,1))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
ggcorr(mtcars)
ggcorr(mtcars,label = TRUE)
data(mtcars)
ggcorr(mtcars,label = TRUE)
to_factors=function(){
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"),levels = c(0,1))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
}
to_factors()
data("mtcars")
head(mtcars)
print("Structure:")
str(mtcars)
print("---------------------------------------------------------------")
print("Summary:")
summary(mtcars)
to_factors=function(){
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"),levels = c(0,1))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
}
to_factors()
View(mtcars)
View(mtcars)
data(mtcars)
cor(mtcars)
to_factors(mtcars)
data(mtcars)
cor(mtcars)
to_factors()
data(mtcars)
cor_mat <- cor(mtcars)
to_factors()
cor_mat[1,]
better_fit <- update(fit1,mpg~am,cyl,disp,hp,wt)
fit1 <- lm(mpg~am,data=mtcars)
summary(fit1)
better_fit <- update(fit1,mpg~am,cyl,disp,hp,wt)
summary(better_fit)
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
summary(better_fit)
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
anova(fit1,better_fit)
install.packages("ggfortify")
library(ggfortify)
autoplot(better_fit)
autoplot(better_fit)
plot(better_fit)
par(mfrow=c(2,2))
plot(better_fit)
plot(better_fit)
library(ggfortify)
autoplot(better_fit)
library(ggfortify)
autoplot(better_fit)
summary(better_fit)
to_factors=function(){
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"),levels = c(0,1))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
}
to_factors()
summary(better_fit)
fit1 <- lm(mpg~am,data=mtcars)
summary(fit1)
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
anova(fit1,better_fit)
summary(better_fit)
to_factors()
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
str(mtcars)
to_factors=function(data){
data$cyl <- factor(data$cyl)
data$vs <- factor(data$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
data$am <- factor(data$am,labels = c("Automatic","Manual"),levels = c(0,1))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
}
to_factors(mtcars)
str(mtcars)
to_factors=function(data){
data$cyl <- factor(data$cyl)
data$vs <- factor(data$vs,labels = c("V-shape","Straight Line"),levels = c(0,1))
data$am <- factor(data$am,labels = c("Automatic","Manual"),levels = c(0,1))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
}
to_factors(data=mtcars)
str(mtcars)
mtcars %>% mutate(cyl=factor(cyl),vs=factor(vs,labels = c("V-shape","Straight Line"),levels = c(0,1)),
am=factor(am,labels = c("Automatic","Manual"),levels = c(0,1)),
gear=factor(gear),carb=factor(carb))
library(dplyr)
mtcars %>% mutate(cyl=factor(cyl),vs=factor(vs,labels = c("V-shape","Straight Line"),levels = c(0,1)),
am=factor(am,labels = c("Automatic","Manual"),levels = c(0,1)),
gear=factor(gear),carb=factor(carb))
library(dplyr)
mtcars <- mtcars %>% mutate(cyl=factor(cyl),vs=factor(vs,labels = c("V-shape","Straight Line"),levels = c(0,1)),
am=factor(am,labels = c("Automatic","Manual"),levels = c(0,1)),
gear=factor(gear),carb=factor(carb))
str(mtcars)
library(dplyr)
data_mtcars <- mtcars %>% mutate(cyl=factor(cyl),vs=factor(vs,labels = c("V-shape","Straight Line"),levels = c(0,1)),
am=factor(am,labels = c("Automatic","Manual"),levels = c(0,1)),
gear=factor(gear),carb=factor(carb))
library(dplyr)
mData <- data_mtcars %>% select(mpg,am) %>%group_by(am) %>%summarise(mean=mean(mpg))
mData
data("mtcars")
head(mtcars)
print("Structure:")
str(mtcars)
print("---------------------------------------------------------------")
print("Summary:")
summary(mtcars)
library(dplyr)
data_mtcars <- mtcars %>% mutate(cyl=factor(cyl),vs=factor(vs,labels = c("V-shape","Straight Line"),levels = c(0,1)),
am=factor(am,labels = c("Automatic","Manual"),levels = c(0,1)),
gear=factor(gear),carb=factor(carb))
View(mtcars)
View(data_mtcars)
View(data_mtcars)
cor_mat <- cor(mtcars)
to_factors()
cor_mat <- cor(mtcars)
cor_mat[1,]
fit1 <- lm(mpg~am,data=mtcars)
summary(fit1)
fit1 <- lm(mpg~am,data=data_mtcars)
summary(fit1)
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
anova(fit1,better_fit)
summary(better_fit)
summary(better_fit)
library(ggfortify)
autoplot(better_fit)
library(ggplot2)
library(gridExtra)
g <- ggplot(data = data_mtcars,aes(y=mpg))
g1 <- g + geom_boxplot(aes(x=cyl,fill=cyl)) + labs(title="Cyl vs mpg") +
theme(plot.title = element_text(hjust = 0.5))
g2 <- g + geom_boxplot(aes(x=vs,fill=vs)) + labs(title="VS vs mpg") +
theme(plot.title = element_text(hjust = 0.5))
g3 <- g + geom_boxplot(aes(x=am,fill=am)) + labs(title="am vs mpg") +
theme(plot.title = element_text(hjust = 0.5))
g4 <- g + geom_boxplot(aes(x=gear,fill=gear)) + labs(title="gear vs mpg") +
theme(plot.title = element_text(hjust = 0.5))
g5 <- g + geom_boxplot(aes(x=carb,fill=carb)) + labs(title="carb vs mpg") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(g1,g2,g3,g4,g5,ncol=3,top="BoxPlot")
library(ggplot2)
library(gridExtra)
g <- ggplot(data = data_mtcars,aes(y=mpg))
g1 <- g + geom_point(aes(x=disp)) + labs(title="disp vs mpg") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",se=FALSE,aes(x=disp))
g2 <- g + geom_point(aes(x=hp)) + labs(title="hp vs mpg") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",se=FALSE,aes(x=hp))
g3 <- g + geom_point(aes(x=drat)) + labs(title="drat vs mpg") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",se=FALSE,aes(x=drat))
g4 <- g + geom_point(aes(x=wt)) + labs(title="wt vs mpg") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",se=FALSE,aes(x=wt))
g5 <- g + geom_point(aes(x=qsec)) + labs(title="qsec vs mpg") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",se=FALSE,aes(x=qsec))
grid.arrange(g1,g2,g3,g4,g5,ncol=3,top="Scatter Plot")
print("Structure:")
str(mtcars)
library(knitr)
library(xtable)
cor_mat <- cor(mtcars)
kable(cor_mat[1,])
library(GGally)
data(mtcars)
ggcorr(mtcars,label = TRUE)
t(x = cor_mat)
t(x = cor_mat[1,])
library(xtable)
cor_mat <- cor(mtcars)
mpg_cor <- t(cor_mat[1,])
rownames(mpg_cor) <-c('mpg')
kable(mpg_cor)
fit1 <- lm(mpg~am,data=data_mtcars)
sum_model <-summary(fit1)
sum_model
r coef(sum_model)[2,4]
coef(sum_model)[2,4]
sum_model$r.squared
fit1 <- lm(mpg~am,data=data_mtcars)
sum_model <-summary(fit1)
sum_model
coef(sum_model)[2,4]
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
anova(fit1,better_fit)
better_fit <- update(fit1,mpg~am+cyl+disp+hp+wt)
comp_models<-anova(fit1,better_fit)
comp_models
comp_models$`Pr(>F)`
comp_models$`Pr(>F)`[2]
comp_models$`Pr(>F)`[2]
omp_models['Pr(>F)'][2]
comp_models['Pr(>F)'][2]
comp_models['Pr(>F)']
comp_models['Pr(>F)'][2]
comp_models['Pr(>F)'][2,]
typeof(comp_models['Pr(>F)'][2,])
comp_models['Pr(>F)'][2,1]
str(mtcars)
t <- str(mtcars)
t
library(xtable)
cor_mat <- cor(mtcars)
mpg_cor <- round(t(cor_mat[1,]),2)
rownames(mpg_cor) <-c('mpg')
kable(mpg_cor)
library(xtable)
cor_mat <- cor(mtcars)
mpg_cor <- round(t(cor_mat[1,]),3)
rownames(mpg_cor) <-c('mpg')
kable(mpg_cor)
comp_models['Pr(>F)'][2,1]
round(comp_models['Pr(>F)'][2,1],2)
summary_model <- summary(better_fit)
summary_model$r.squared
library(GGally)
data(mtcars)
ggcorr(mtcars,label = TRUE) + labs(title="Correlation Plot")
library(GGally)
data(mtcars)
ggcorr(mtcars,label = TRUE) + labs(title="Correlation Plot")++
theme(plot.title = element_text(hjust = 0.5))
library(GGally)
data(mtcars)
ggcorr(mtcars,label = TRUE) + labs(title="Correlation Plot")+
theme(plot.title = element_text(hjust = 0.5))
library(ggfortify)
autoplot(better_fit)+labs(title="Residual plot")+
theme(plot.title = element_text(hjust = 0.5))
library(ggfortify)
autoplot(better_fit)
library(ggfortify)
autoplot(better_fit,title= 'Residual Plot')
setwd("F:/Coursera/DataScienceSpecializationCoursera/8_Practical_MachineLearning/Week2")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list = FALSE)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32343)
modelFit <- train(type~.,data=training,method="glm")
modelFit
modelFit <- train(type~.,data=training,method="glm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
set.seed(32323)
folds <- createFolds(y=spam$type,returnTrain = T)
sapply(folds, length)
set.seed(32323)
folds <- createFolds(y=spam$type,returnTrain = TRUE)
sapply(folds, length)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list = FALSE)
training <- spam[inTrain,]
testing>-spam[-inTrain,]
modelFit <- train(type~.,data = training,method="glm")
set.seed(32323)
folds <- createResample(y=spam$type,times = 10,
list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow = 20,
horizon = 10)
names(folds)
length(spam$type)
folds$train[[1]]
folds$train[[2]]
folds$test[[2]]
folds$test[[1]]
folds$train[[1]]
install.packages("ISLR")
library(ISLR)
library(ISLR)
data("Wage")
summary(Wage)
Wage$sex
library(ISLR);library(ggplot2);library(caret)
inTrain <- createDataPartition(Wage$wage,p=0.7,list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,plot = "pairs")
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,plot = "pairs")
g <- ggplot(data=Wage,aes(y=wage,x=age))
g + geom_point()
g <- ggplot(data=Wage,aes(y=wage,x=age))
g + geom_point()
g <- ggplot(data=Wage,aes(y=wage,x=age,colour=jobclass))
g + geom_point()
cutWage <- cut2(training$wage,g=3)
library('Hmisc')
cutWage <- cut2(training$wage,g=3)
table(cutWage)
cutWage
library('Hmisc')
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p <- ggplot(data=training,aes(y=age,x=cutWage,colour=cutWage))
p + geom_boxplot()
library('Hmisc')
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p <- ggplot(data=training,aes(y=age,x=cutWage,fill=cutWage))
p + geom_boxplot()
p +geom_boxplot()+geom_jitter()
p <- ggplot(data=training,aes(y=age,x=cutWage,fill=cutWage))+ geom_boxplot()
p
p2 <-p + geom_jitter()
library(gridExtra)
grid.arrange(p,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
g <- ggplot(data = Wage,aes(x=wage,colour=education))
g +geom_density()
?predict
predict()
