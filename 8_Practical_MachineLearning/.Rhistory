library(gridExtra)
g1 <- ggplot(data=trainFaith,aes(x=waiting,y=eruptions))+geom_point(colour='blue')+
geom_line(aes(y=predict(lm1,trainFaith)))
g2 <- ggplot(data=testFaith,aes(x=waiting,y=eruptions))+geom_point(colour='blue')+
geom_line(aes(y=predict(lm1,testFaith)))
grid.arrange(g1,g2,ncol=2)
RMSE(lm1$fitted.values,trainFaith$eruptions)
RMSE(lm1$fitted.values,trainFaith$eruptions) * dim(training)[1]
RMSE(lm1$fitted.values,trainFaith$eruptions) * sqrt(dim(training)[1])
RMSE(predict(lm1,trainFaith),trainFaith$eruptions)
dim(trainFaith)[1]
RMSE(predict(lm1,trainFaith),trainFaith$eruptions)*sqrt(137)
RMSE(predict(lm1,trainFaith),trainFaith$eruptions)
RMSE(predict(lm1,testFaith),testFaith$eruptions)
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
predi1
pred1
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
g <- ggplot(pred1,aes(x=fit,y=lwr)) + geom_line()
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
g <- ggplot(data = data.frame(pred1),aes(x=fit,y=lwr)) + geom_line()
g
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,])
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
g <- ggplot(data=testFaith,aes(x=waiting,y=eruptions))
g<- g +geom_point()
g +geom_linerange(aes(x=testFaith[ord],y=pred1[ord,]))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,])
modelFit <- train(eruptions~waiting,method="lm",data=trainFath)
modelFit <- train(eruptions~waiting,method="lm",data=trainFaith)
summary(modelFit$finalModel)
library(ISLR);library(ggplot2);library(caret)
data(Wage);
str(Wage)
library(ISLR);library(ggplot2);library(caret);library(dplyr)
Wage <- select(Wage,-logwage)
str(Wage)
library(ISLR);library(ggplot2);library(caret);library(dplyr)
data(Wage);
Wage <- select(Wage,-logwage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list = F)
training <- Wage[inTrain,];testing<- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot = "points")
training[,c("age","education","jobclass")
]
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,
plot = "pairs")
featurePlot(x=training[,c("age","education","jobclass")],
+             y=training$wage,
+             plot = "pairs")
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage,plot = "pairs")
g <- ggplot(data = training,aes(y=wage,x=age))
g +geom_point()
g <- ggplot(data = training,aes(y=wage,x=age))
g +geom_point()
head(training)
g + geom_point(aes(colour=jobclass))
g + geom_point(aes(colour=education))
model<- train(wage~age+education+jobclass,method="lm",data=training)
fitMod <- model$finalModel
print(fitMod)
summary(fitMod)
modelFit<- train(wage~age+education+jobclass,method="lm",data=training)
fitMod <- model$finalModel
print(fitMod)
g<- ggplot(data=training,aes(x=fitMod$fitted.values,y=fitMod$residuals,
colour=region))
g +geom_point()
str(training)
unique(training$region)
pred <- predict(modelFit,testing)
g <- ggplot(data=testing,aes(x=wage,y=pred,colour=year))
g+geom_point()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
library(ggplot2)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=outcome,colour=colour))+geom_point()
g
}
createPlotByColour(training,"CompressiveStrength",colour="Age")
library(ggplot2)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=as.formula(outcome),colour=as.formula(colour)))
+geom_point()
g
}
createPlotByColour(training,"CompressiveStrength",colour="Age")
library(ggplot2)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=as.formula(outcome),colour=as.formula(colour)))+
geom_point()
g
}
createPlotByColour(training,"CompressiveStrength",colour="Age")
head(training)
library(ggplot2)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=as.formula(outcome),colour=as.formula(colour)))+
geom_point()
g
}
createPlotByColour(training,"CompressiveStrength",colour="Age")
library(ggplot2)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome,colour=colour)+
geom_point()
g
}
createPlotByColour(training,"CompressiveStrength",colour="Age")
library(rlist)
library(ggplot2)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome,colour=colour)+
geom_point()
g
}
g_plots_list <- list()
for(i in dim(training)[2]-1){
list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour=colnames(training)[[i]]))
}
g_plots_list
g_plots_list[[1]]
g_plots_list[1]
library(ggplot2)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome,colour=colour)+
geom_point()
g
}
g_plots_list <- list()
for(i in dim(training)[2]-1){
g_plots_list<-list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour=colnames(training)[[i]]))
}
g_plots_list
g_plots_list[[2]]
length(g_plots_list)
dim(training)[2]-1
library(ggplot2)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome,colour=colour)+
geom_point()
g
}
g_plots_list <- list()
for(i in 1:dim(training)[2]-1){
g_plots_list<-list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour=colnames(training)[[i]]))
}
colnames(training)
colnames(training)[1]
colnames(training)[[1]]
colnames(training)[2]
library(ggplot2)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome,colour=colour)+
geom_point()
g
}
g_plots_list <- list()
for(i in 1:8){
g_plots_list<-list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour= colnames(training)[i]))
}
g_plots_list
g_plots_list[2]
do.call(grid.arrange,c(g_plots_list,ncol=2)
do.call(grid.arrange,c(g_plots_list,ncol=2))
grid.arrange(grobs=g_plots_list,ncol=2)
grid.arrange(grobs=g_plots_list,ncol=2)
head(training)
library(Hmisc)
library(ggplot2)
library(Hmisc)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA,title){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome)+
geom_point(aes(colour=colour)) + labs(title=title)
g
}
g_plots_list <- list()
for(i in 1:8){
g_plots_list<-list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,i],g=4),title=colnames(training)[i]))
}
grid.arrange(grobs=g_plots_list,ncol=2)
cut2(training[,1],g=4)
cut2(training[,2],g=4)
str(training)
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4)
)
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4),title="1")
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,2],g=4),title="1")
g_plots_list[1]
g_plots_list[2]
g_plots_list[3]
g_plots_list <- list()
for(i in 1:8){
g_plots_list<-list.append(g_plots_list,createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,i],g=4),title=colnames(training)[i]))
}
length(g_plots_list)
g_plots_list[1]
g_plots_list[2]
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4),title=colnames(training)[1])
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4),title=colnames(training)[1])
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4),title=colnames(training)[1])
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,2],g=4),title=colnames(training)[2])
createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,2],g=4),title=colnames(training)[2])
library(ggplot2)
library(Hmisc)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA,title){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data)+aes_string(x=pred,y=outcome)+
geom_point(aes(colour=colour)) + labs(title=title)
g
}
g_plots_list <- list()
for(i in 1:8){
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,i],g=4),title=colnames(training)[i])
g_plots_list<-list.append(g_plots_list,g)
}
grid.arrange(grobs=g_plots_list,ncol=2)
grid.arrange(grobs=g_plots_list,ncol=2)
g
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,1],g=4),title=colnames(training)[1])
g
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,2],g=4),title=colnames(training)[2])
g
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,3],g=4),title=colnames(training)[3])
g
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,4],g=4),title=colnames(training)[4])
g
g_plots_list
g_plots_list[1]
g_plots_list[2]
library(ggplot2)
library(Hmisc)
library(rlist)
createPlotByColour <- function(data,outcome,colour,pred=NA,title){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(colour=colour))+aes_string(x=pred,y=outcome)+
geom_point() + labs(title=title)
g
}
g_plots_list <- list()
for(i in 1:8){
g <- createPlotByColour(training,"CompressiveStrength",colour= cut2(training[,i],g=4),title=colnames(training)[i])
g_plots_list<-list.append(g_plots_list,g)
}
grid.arrange(grobs=g_plots_list,ncol=2)
g_plots_list[1]
g_plots_list[2]
library(ggplot2)
library(Hmisc)
library(rlist)
createPlotByColour <- function(data,colour,pred=NA,title){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=CompressiveStrength,colour=colour))+
geom_point() + labs(title=title)
g
}
g_plots_list <- list()
for(i in 1:8){
colour <- colour= cut2(training[,i],g=4)
g <- createPlotByColour(training,"",colour=colour ,title=colnames(training)[i])
g_plots_list<-list.append(g_plots_list,g)
}
library(ggplot2)
library(Hmisc)
library(rlist)
createPlotByColour <- function(data,colour,pred=NA,title){
if(is.na(pred)){
pred <- 1:dim(data)[1]
}
g <- ggplot(data=data,aes(x=pred,y=CompressiveStrength,colour=colour))+
geom_point() + labs(title=title)
g
}
g_plots_list <- list()
for(i in 1:8){
colour <- cut2(training[,i],g=4)
g <- createPlotByColour(training,"",colour=colour ,title=colnames(training)[i])
g_plots_list<-list.append(g_plots_list,g)
}
grid.arrange(grobs=g_plots_list,ncol=2)
createPlotByColour(training,colour= cut2(training[,1],g=4),title=colnames(training)[1])
createPlotByColour(training,colour= cut2(training[,2],g=4),title=colnames(training)[2])
createPlotByColour(training,colour= cut2(training[,3],g=4),title=colnames(training)[3])
createPlotByColour(training,colour= cut2(training[,4],g=4),title=colnames(training)[4])
createPlotByColour(training,colour= cut2(training[,5],g=4),title=colnames(training)[5])
createPlotByColour(training,colour= cut2(training[,6],g=4),title=colnames(training)[6])
createPlotByColour(training,colour= cut2(training[,7],g=4),title=colnames(training)[7])
createPlotByColour(training,colour= cut2(training[,8],g=4),title=colnames(training)[8])
createPlotByColour(training,colour= cut2(training[,9],g=4),title=colnames(training)[9])
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(SuperPlasticizer,data = training)
head(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer,data = training)
qplot(log10(Superplasticizer+1),data = training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL", names(training))]
procTrain <- preProcess(trainingIL, method = "pca", thresh = 0.9 )
procTrain
str(training)
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
head(trainingIL)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL", names(training))]
testingIL <- training[,grep("^IL", names(testing))]
model_notPC <- train(training$diagnosis~.,method="glm",data=trainingIL)
trainingIL
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- training[,grep("^IL|diagnosis", names(testing))]
model_notPC <- train(diagnosis ~.,method="glm",data=trainingIL)
confusionMatrix(testing$diagnosis,predict(model_notPC,testingIL))
testingIL$diagnosis
confusionMatrix(testingIL$diagnosis,predict(model_notPC,testingIL))
model_notPC <- train(diagnosis ~.,method="glm",preprocess="pca",thresh = 0.8,data=trainingIL)
model_notPC <- train(diagnosis ~.,method="glm",preprocess="pca",data=trainingIL)
model_notPC <- train(diagnosis ~.,method="glm",preProcess="pca",data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(model_notPC,testingIL))
model_notPC <- train(diagnosis ~.,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
model_notPC <- train(diagnosis ~.,method="glm",preProcess="pca",trControl=ctrl,data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(model_notPC,testingIL))
model <- train(diagnosis ~ ., data = trainingIL, method = "glm")
predict_model <- predict(model, newdata= testingIL)
matrix_model <- confusionMatrix(predict_model, testingIL$diagnosis)
matrix_model$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# grep all columns with IL and diagnosis in the traning and testing set
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
# non-PCA
model <- train(diagnosis ~ ., data = trainingIL, method = "glm")
predict_model <- predict(model, newdata= testingIL)
matrix_model <- confusionMatrix(predict_model, testingIL$diagnosis)
matrix_model$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- training[,grep("^IL|diagnosis", names(testing))]
model_notPC <- train(diagnosis ~.,method="glm",data=trainingIL)
mat <-confusionMatrix(testingIL$diagnosis,predict(model_notPC,testingIL))
mat$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- training[,grep("^IL|diagnosis", names(testing))]
model_notPC <- train(diagnosis ~.,method="glm",data=trainingIL)
mat <-confusionMatrix(testingIL$diagnosis,predict(model_notPC,newdata=testingIL))
mat$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
model_notPC <- train(diagnosis ~.,method="glm",data=trainingIL)
mat <-confusionMatrix(testingIL$diagnosis,predict(model_notPC,newdata=testingIL))
mat$overall[1]
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
model_notPC <- train(diagnosis ~.,method="glm",preProcess="pca",trControl=ctrl,data=trainingIL)
confusionMatrix(testingIL$diagnosis,predict(model_notPC,testingIL))
setwd("F:/Coursera/DataScienceSpecializationCoursera/8_Practical_MachineLearning")
data("iris")
names(iris)
table(iris$Species)
data("iris");library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=F)#
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
g <- ggplot(data=training,aes(x=Petal.Width,y=Sepal.Width,colour=Species))
g +geom_point()
library(caret)
modFit <- train(Species~.,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform = TRUE)
text(modFit$finalModel,use.n = TRUE,all=TRUE)
plot(modFit$finalModel,uniform = TRUE)
text(modFit$finalModel,use.n = TRUE,all=TRUE)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata = testing)
