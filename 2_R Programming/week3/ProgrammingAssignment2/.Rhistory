a <- available.packages()
head(rownames(a),3)
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
library("ggplot2", lib.loc="~/R/win-library/3.4")
search()
detach("package:BiocInstaller", unload=TRUE)
search()
installed.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
q()
print("Hello World")
install.packages("swirl")
lapply
x <-list(a=1:5,b=rnorm(10))
x
lapply(x, mean)
x <- 1:4
lapply(x, runif,min=0,max=10)
x <- matrix(rnorm(200),20,10)
apply(x, 2, mean)
apply(x, 1, sum)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep, 1:4,4:1)
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
gl
?gl
log(-1)
log(1)
log(0)
log(10^3)
log10(10)
exp(2)
x <- 1
invisible(1)
printmessage <-function(x) {
}
printmessage <-function(x) {
if(x< 0) print("hahahah")
}
printmessage <-function(x) {
if(x< 0) print("hahahah")
else print("buhaha")}
printmessage(10)
printmessage(-0)
printmessage(-090)
printmessage(NA)
printmessage <-function(x) {
if(x< 0) print("hahahah")
else print("buhaha")}
printmessage <-function(x) { if(is.na(x)) print("blabla")
else if(x< 0) print("hahahah")
else print("buhaha")}
printmessage(NA)
printmessage(2)
printmessage(-Inf)
printmessage(9)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
mean(iris[iris$Species == "virginica"]$Sepal.Length)
iris[["Species"]]==virginica
iris[["Species"]]=="virginica"
condition <-iris[["Species"]]=="virginica"
iris[condition,]
iris[condition]
condition <- iris["species"]=="virginica"
condition <- iris$Species=="virginica"
iris[condition]
iris[,condition]
iris[condition,]
condition
mean(iris[condition,]$Sepal.Length)
filltered = iris[condition,]
mean(filltered$Sepal.Length)
round(1.1)
round(6.588)
rowMeans(iris)
rowMeans(iris[,1:4])
colMeans(iris)
colMeans(iris[,1:4])
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
?mean
tapply(mtcars$hp,mtcars$cyl , mean)
res <-tapply(mtcars$hp,mtcars$cyl , mean)
round(res["8"]-res["4"])
res["8"]-res["4"]
res[["8"]]-res[["4"]]
debug(ls)
ls
ls()
library("swirl", lib.loc="~/R/win-library/3.4")
Q
Q
swirl()
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/R/win-library/3.4")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/R/win-library/3.4")
undebug(ls)
Q
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/R/win-library/3.4")
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
Use tapply(flags$animate,
| flags$landmass, mean)
Use tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
m <- matrix(1:4,1,2)
m
m <- matrix(1:4,2,2)
m
inv(A)
library(matlib)
solve(m) %*%m
md =solve(m) %*%m
m%*%m
m%*%md
solve(m)
?solve
matrix.inverse(m)
det(m)
a<- matrix(1:4,1,4)
det(m)
det(a)
solve(a)
b =det(a)
b
b <-det(a)
b
m
dim(m)
dim(m)[1] == dim(m)[2]
det(m)
det(a)
solve(m)
setwd("F:/Coursera/Data Science Specialization/R Programming/week3/ProgrammingAssignment2")
source("cachematrix.R")
c_m <- makeCacheMatrix(m)
c_m$get()
c_m <- makeCacheMatrix()
c_m$set(m)
c_m
c_m$set(m)
c_m$get()
cacheSolve(c_m)
c_m$setinverse()
c_m$getinverse()
c_m$set(a)
cacheSolve(c_m)
source("cachematrix.R")
c_m <- makeCacheMatrix()
c_m$set(a)
cacheSolve(c_m)
m <-matrix(rep(1,4),2,2)
m
solve(m)
c_m$set(m)
cacheSolve(c_m)
source("cachematrix.R")
c_m <- makeCacheMatrix()
c_m$set(m)
cacheSolve(c_m)
