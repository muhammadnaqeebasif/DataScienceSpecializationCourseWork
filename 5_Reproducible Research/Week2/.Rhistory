quantile(affyMist$misMatches)
dbClearResult(query)
library(RMySQL)
UcscDv <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(UcscDv,"SHOW DATABASES;")
dbDisconnect(UcscDv)
hg19 <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu",
db="hg19")
allTables <-dbListTables(hg19)
length(allTables)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"SELECT COUNT(*) FROM affyU133Plus2;")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19,"SELECT * FROM affyU133Plus2 WHERE
misMatches BETWEEN 1 AND 3")
affyMist <-fetch(query)
quantile(affyMist$misMatches)
dbClearResult(query)
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
View(students)
View(students)
students2
?gather
gather(students2,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(data = res,col=sex_class,into=c("sex","class"))
submit()
students
students3
students3 %>% separate(col=test,into=c("midterm","final"))
students3 %>% gather(class_grade,-test,-name)
students3 %>% gather(class_grade,value,-test,-name)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,value,-test,-name) %>%separate(test)
students3 %>% gather(class,value,-test,-name) %>%separate(test,into = c("midterm","final"))
submit()
students3 %>% spread(test)
students3 %>% spread(test,name)
students3 %>% spread(test)
students3 %>% spread(test,-name:)
students3 %>% spread(test,-name)
View(students3)
View(students3)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,grade,-test,-name)
students3 %>% gather(class,grade,-test,-name) %>%spread(test,grade)
submit()
students3 %>% gather(class,grade,-test,-name)
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE)
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE) %>% spread(test,grade)
submit()
reset()
swirl()
View(students2)
View(students2)
students2 %>% gather(sex_count,count,-grade)
students2 %>% gather(sex_count,count,-grade) %>% separate(sex_count,into(c("sex","class")))
students2 %>% gather(sex_count,count,-grade) %>% separate(sex_count,into=c("sex","class"))
View(students3)
View(students3)
students3 %>% gather(key)
students3 %>% gather(class,value,-test,-name)
students3 %>% gather(class,value,-test,-name,factor_key = TRUE)
students3 %>% gather(key=class,value,-test,-name,factor_key = TRUE)
reset()
swirl()
students3 %>% gather(class,grade,-test,-name,factor_key = TRUE)
submit()
?spread()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students3 %>% gather(class,grade,-test,-name,na.rm = TRUE) %>% spread(test,grade) %>%mutate(class=parse_number(class))
submit()
students4
submit()
submit()
submit()
passed
failed
passed <-passed %>% mutate(status="passed")
failed <-failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
sat %>%gather(test_sex,count)
sat %>%gather(test_sex,count,-score_range)
sat %>%gather(test_sex,count,-score_range) %>% separate(test_sex,into = c("test","sex"))
submit
submit()
submit()
submit()
submit()
sat %>%select(-contains("total"))%>%
xzx
sat %>%select(-contains("total"))
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range)
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
%>% print
sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
test <-sat %>%select(-contains("total"))%>%
gather(test_sex,count,-score_range) %>%
separate(test_sex,into = c("test","sex"))
View(test)
test %>% mutate(sex=ifelse(sex=='fem','female','male'))
submit()
reset()
swirl()
submit()
remove.packages(swirl
)
remove.packages('swirl')
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(student2,sex_class,count,-grade)
gather(students2,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into=c("sex","class"))
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")}
devtools::install_deps()
install.packages(root)
install.packages('root')
install.packages('root')
devtools::install_deps()
install.packages('root')
library(root)
?setRepositories
install.packages('root',dependencies = TRUE)
install.packages('root',repos='http://cran.us.r-project.org')
install.packages("devtools",dependencies = TRUE)
library(devtools)
devtools::install_deps()
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
install.packages(devtools)
install.packages('devtools',dependencies = TRUE)
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
install.packages("root")
library(swirl)
swirl()
head(airquality)
xyplot(Ozonr~Wind,airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red")
xyplot(Ozone~Wind,airquality,col="red",main="Big Apple Data")
xyplot(Ozone~Wind,airquality,col="red",main="Big Apple Data",pch=8)
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),airquality)
xyplot(Ozone~Wind|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(y~x)
table(y)
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
("plot1.R")
myedit("plot1.R")
pathofile("plot1.R")
source("plot1.R",local = TRUE)
source("plot1.R",local = TRUE)
source(pathtofile="plot1.R",local = TRUE)
source(pathtofile("plot1.R"),local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
diamonds$color
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price~carat | color*cut,data = diamonds)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <-hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
library("swirl")
swirl()
swirl()
swirl()
cmat
points(xc,cy,col=c("red,"orange","purple",pch=3,cex=2,lwd=2))
points(xc,cy,col=c("red,"orange","purple"),pch=3,cex=2,lwd=2)
points(cx,cy,col=c("red,"orange","purple"),pch=3,cex=2,lwd=2)
points(cx,cy,col=c("red",orange","purple"),pch=3,cex=2,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min
)
View(distTmp)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
point(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
PLOT(X,Y,COL=kmObj$cluster,pch=19,cex=2)
PLOT(X,Y,COL=kmObj$cluster,pch=19,cex=2)
plot(X,Y,COL=kmObj$cluster,pch=19,cex=2)
plot(dataFrame,COL=kmObj$cluster,pch=19,cex=2)
plot(dataFrame,col=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
source("addPatt.R")
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
t(matv)
matu %*% diag %*% t(matv)
scale(svd(mat))
svd(scale(mat))
scale(mat)
?prcomp
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd
svd2
svd2$v[,1:2]
svd2$d
faceData
dim(faceData)
a1
(svd1$u[,1]*svd1$d[1]) %*%svd1$v[1]
(svd1$u[,1]*svd1$d[1])
a1<-(svd1$u[,1]*svd1$d[1]) %*%t(svd1$v[1])
a1<-(svd1$u[,1]*svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
ssd[,562:563]
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- ssd$subject[,1]
sub1 <- ssd$subject
sub1 <- subset(ssd,subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist[,1:3]
mdist<-x[,1:3]
mdist<-sub1[,1:3]
mdist<-dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity) )
0
0
0
0
0
0
0
exit
ezxit()
xs
z<-23
z
library(swirl)
swirl()
library(swirl)
library(swirl)
swirl()
dim(ssd)
names(ssd[562])
names(ssd[562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$sub]))
sum(table(ssd$subject]))
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject==1)
dim(sub1)
names(sub[,1:12])
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclustering(mdist)
hclustering <- hclust(mdist)
unclass(sub1$activity)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
scale(sub1[,-c(562,563)])
svd1 <-scale(sub1[,-c(562,563)])
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
maxCon
mdist <- dist(sub1[,c(10:12,maxCon])
mdist <- dist(sub1[,c(10:12,maxCon]))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplot(hclustering,lab.col=unclass(sub1$activity))
myplclust(hclustering,lab.col=unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
dim(sub1)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
kClust$cluster
table(kClust$cluster)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[1:3])
laying <- which(kClust$size==49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Laying Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
0
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|",fixed=TRUE)
cnames
wcol
head(pm0)
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(make.names(cnames[[1]][wcol]))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
Summary(x0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(x1[negative],na.rm = T)
sum(negative,na.rm = T)
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates <- pm1$Date
str(date)
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1,State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(pm0,County.Code==63 & Site.ID==2008)
pm0sub <- subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1,County.Code==63 & Site.ID==2008)
pm25
x0sub < pm0sub$Sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot()
plot(dates0, x0sub,pch=20)
abline(h=median(x0sub))
abline(h=median(x0sub,na.rm-TRUE),lwd=2)
abline(h=median(x0sub,na.rm=TRUE),lwd=2)
plot(dates1, x1sub,pch=20)
abline(h=median(x1sub,na.rm=TRUE),lwd=2)
plot(dates0, x0sub,pch=20,ylim = rng)
rng<- range(x0sub,x1sub,na.rm = TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value, State.Code, mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value, State.Code, mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean-mn0)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merge(d0,d1,"state")
dim(mrg)
head(mrg)
plot(rep(1,52),mrg[,2],xlim = c(.5,2.5))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3])
)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3])
)
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x<mrg$mean.y]
mrg[mrg$mean.x<mrg$mean.y,]
setwd("F:/Coursera/DataScienceSpecializationCoursera/5_Reproducible Research/Week2")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data(airquality)
summary(airquality)
